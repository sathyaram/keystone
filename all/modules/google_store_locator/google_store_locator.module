<?php
/**
 * @file
 * Code for the Google Store Locator feature.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function google_store_locator_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "strongarm" && $api == "strongarm") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_views_api().
 */
function google_store_locator_views_api() {
  return array("version" => "3.0");
}

/**
 * Implements hook_node_info().
 */
function google_store_locator_node_info() {
  $items = array(
    'store_location' => array(
      'name' => t('Store Location'),
      'base' => 'node_content',
      'description' => t('This is used to generate location content for the store locator map.'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}

/**
 * Implements hook_menu().
 *
 * By using a render array as the page callback for this menu item then we
 * can give the map and panel elements as much room as possible to breathe.
 */
function google_store_locator_menu() {

  $items[variable_get('gsl_display_path', 'store-locator')] = array(
    'title' => variable_get('gsl_title', 'Store Locator'),
    'description' => 'Store locator map using Google Store Location Library',
    'page callback' => 'google_store_locator_default_page',
    'access arguments' => array('access content'),
  );
  $items['admin/config/search/google_store_locator'] = array(
    'title' => 'Google Store Locator',
    'description' => 'Google Store Locator Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_store_locator_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'management',
    'weight' => 1,
  );
  return $items;
}

/**
 * Create admin form for Google Store Locator.
 */
function google_store_locator_admin_form($form, &$form_state) {

  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Google Store Locator Administrator Settings'),
  );
  $form['google_store_locator']['gsl_title'] = array(
    '#type' => 'textfield',
    '#title' => t('What should the title be?'),
    '#description' => t('The title for your locator'),
    '#default_value' => variable_get('gsl_title', 'Store Locator'),
    '#size' => 30,
    '#required' => TRUE,
  );
  $form['google_store_locator']['gsl_search_label'] = array(
    '#type' => 'textfield',
    '#title' => t('What should the search label say?'),
    '#description' => t('The label shown above the search input box.'),
    '#default_value' => variable_get('gsl_search_label', 'Where are you?'),
    '#size' => 30,
    '#required' => TRUE,
  );
  $form['google_store_locator']['gsl_noresults'] = array(
    '#type' => 'textfield',
    '#title' => t('What should be displayed if no stores are found after searching a location?'),
    '#description' => t('The message displayed if no stores are found after searching.'),
    '#default_value' => variable_get('gsl_noresults', 'There are no stores in this area. However, stores closest to you are listed below.'),
    '#size' => 70,
    '#required' => TRUE,
  );

  $form['google_store_locator']['gsl_display_search_marker'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display "You are Here" marker on the map?'),
    '#default_value' => variable_get('gsl_display_search_marker', 0),
  );

  $form['google_store_locator']['gsl_items_per_panel'] = array(
    '#type' => 'textfield',
    '#title' => t('How many stores should show in the panel?'),
    '#description' => t('The panel shows the X closest locations where X is the value entered above.'),
    '#default_value' => variable_get('gsl_items_per_panel', '10'),
    '#size' => 5,
    '#element_validate' => array('element_validate_integer_positive'),
    '#required' => TRUE,
  );
  $form['google_store_locator']['gsl_map_lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Map center point (Latitude)'),
    '#default_value' => variable_get('gsl_map_lat', '40'),
    '#size' => 5,
    '#element_validate' => array('element_validate_number'),
    '#required' => TRUE,
  );
  $form['google_store_locator']['gsl_map_long'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Map center point (Longitude)'),
    '#default_value' => variable_get('gsl_map_long', '-100'),
    '#size' => 5,
    '#element_validate' => array('element_validate_number'),
    '#required' => TRUE,
  );
  $form['google_store_locator']['gsl_map_zoom'] = array(
    '#type' => 'textfield',
    '#title' => t('Default zoom level'),
    '#default_value' => variable_get('gsl_map_zoom', '4'),
    '#size' => 5,
    '#element_validate' => array('element_validate_integer'),
    '#description' => t('Enter a value from 0-21 with 0 being the farthest distance from the earth'),
    '#required' => TRUE,
  );

  $form['google_store_locator']['gsl_max_zoom'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum zoom level'),
    '#default_value' => variable_get('gsl_max_zoom', '16'),
    '#size' => 5,
    '#element_validate' => array('element_validate_integer'),
    '#description' => t('Enter a value from 0-21 with 0 being the farthest distance from the earth. This will be the closest a user can zoom in.'),
    '#required' => TRUE,
  );

  $form['google_store_locator']['gsl_loc_search_zoom'] = array(
    '#type' => 'textfield',
    '#title' => t('Location search zoom level'),
    '#default_value' => variable_get('gsl_loc_search_zoom', variable_get('gsl_loc_aware_zoom', 10)),
    '#size' => 5,
    '#element_validate' => array('element_validate_integer'),
    '#description' => t('The zoom level to use when a user enters a location into the panel\'s search box. Enter a value from 0-21 with 0 being the farthest distance from the earth'),
  );

  if (module_exists('file')) {
    $form['google_store_locator']['gsl_marker_icon'] = array(
      '#title' => t('Marker Icon'),
      '#type' => 'managed_file',
      '#description' => t('The uploaded image will be displayed as the store location icon in the map.'),
      '#default_value' => variable_get('gsl_marker_icon', ''),
      '#upload_location' => 'public://gsl_marker_icon/',
    );
  }
  else {
    $form['google_store_locator']['gsl_marker_icon'] = array(
      '#markup' => '<h6>' . t('To enable the custom marker icon feature please install the file module') . '</h6>',
    );
  }

  // Add distance functionality to the module.
  $form['google_store_locator']['proximity'] = array(
    '#type' => 'fieldset',
    '#title' => t('Proximity settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  // Place a check box for enabling or disabling the display of proximity.
  $form['google_store_locator']['proximity']['proximity_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display proximity in google search.'),
    '#default_value' => variable_get('proximity_enabled', 0),
  );

  // Allow the user to choose whether or not KM or MI are used.
  $form['google_store_locator']['proximity']['proximity_metric'] = array(
    '#type' => 'select',
    '#title' => t('Metric'),
    '#options' => array(
      'mi' => t('Miles'),
      'km' => t('KM'),
    ),
    '#default_value' => variable_get('proximity_metric', 'mi'),
    '#description' => t('Determines whether distance is measured and displayed in MI or KM.'),
  );


  // We put all advanced features into a fieldset.
  $form['google_store_locator']['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['google_store_locator']['advanced']['gsl_json_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to Store Location data'),
    '#description' => t("Warning: by default this points to the Location Export View which provides the Store data in the proper JSON format. Do not change this path unless you're sure it points to a properly formatted source."),
    '#default_value' => variable_get('gsl_json_path', 'store-locator/json'),
    '#required' => TRUE,
  );
  $form['google_store_locator']['advanced']['gsl_data_cache_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable client-side caching for the store data response'),
    '#description' => t('If enabled, the response from the path above is cached on the client side per request url. The caching is per url to support marker management urls in the form of "data-path/{latitude}/{longitude}". Only the last 3 responses will be cached.'),
    '#default_value' => variable_get('gsl_data_cache_enabled', TRUE),
  );
  $form['google_store_locator']['advanced']['gsl_display_path'] = array(
    '#type' => 'textfield',
    '#title' => t('What is the desired path for the store locator?'),
    '#default_value' => variable_get('gsl_display_path', 'store-locator'),
    '#description' => t('By default it will be served from /store-locator'),
    '#required' => TRUE,
  );
  $form['google_store_locator']['advanced']['gsl_loc_aware'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Map with Location Awareness'),
    '#description' => t('This allows users to share their location via the browser, and then center the map view on that location'),
    '#default_value' => variable_get('gsl_loc_aware', FALSE),
  );
  $form['google_store_locator']['advanced']['gsl_loc_aware_zoom'] = array(
    '#type' => 'textfield',
    '#title' => t('Set Location Awareness Zoom Level'),
    '#description' => t('Enter a value from 0-21 with 0 being the farthest distance from the earth'),
    '#element_validate' => array('element_validate_integer'),
    '#size' => 5,
    '#default_value' => variable_get('gsl_loc_aware_zoom', NULL),
    '#states' => array(
      'visible' => array(
        ':input[name="gsl_loc_aware"]' => array('checked' => TRUE)),
      'required' => array(
        ':input[name="gsl_loc_aware"]' => array('checked' => TRUE)),
    ),
  );
  $form['google_store_locator']['advanced']['gsl_map_cluster'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable marker clustering'),
    '#default_value' => variable_get('gsl_map_cluster', FALSE),
    '#description' => t("WARNING: Using this option alone won't necessarily improve performance when viewing >1k markers. To improve performance use this in conjunction with Viewport Marker Management. (see the README.txt)"),
  );

  $markerclusterer_exist = (bool) google_store_locator_get_markerclusterer_js();
  if (!$markerclusterer_exist) {
    $form['google_store_locator']['advanced']['gsl_map_cluster']['#value'] = FALSE;
    $form['google_store_locator']['advanced']['gsl_map_cluster']['#disabled'] = TRUE;
    $form['google_store_locator']['advanced']['gsl_map_cluster']['#description'] = t('Marker Clusterer library is missing. see !reports', array('!reports' => l(t('reports'), 'admin/reports/status')));
  }
  $form['google_store_locator']['advanced']['gsl_map_cluster_grid'] = array(
    '#type' => 'textfield',
    '#title' => t('Cluster Grid size'),
    '#description' => t('The grid size of a cluster in pixels.'),
    '#element_validate' => array('element_validate_integer'),
    '#size' => 5,
    '#default_value' => variable_get('gsl_map_cluster_grid', 50),
    '#states' => array(
      'visible' => array(
        ':input[name="gsl_map_cluster"]' => array('checked' => TRUE)),
      'required' => array(
        ':input[name="gsl_map_cluster"]' => array('checked' => TRUE)),
    ),
  );

  $form['google_store_locator']['advanced']['gsl_cluster_zoom_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Cluster Zoom limit'),
    '#description' => t('The zoom level at which clusters are no longer displayed.') . '<br />' .
    t('Enter a value from 0-21 with 0 being the farthest distance from the earth'),
    '#element_validate' => array('element_validate_integer'),
    '#size' => 5,
    '#default_value' => variable_get('gsl_cluster_zoom_limit', 10),
    '#states' => array(
      'visible' => array(
        ':input[name="gsl_map_cluster"]' => array('checked' => TRUE)),
      'required' => array(
        ':input[name="gsl_map_cluster"]' => array('checked' => TRUE)),
    ),
  );

  // Create the Viewport marker management element
  $form['google_store_locator']['advanced']['gsl_viewport'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Viewport Marker Management'),
    '#default_value' => variable_get('gsl_viewport', FALSE),
    '#description' => t("Recommended for performance if number of stores is >1k"),
  );

  // If not all dependencies are met then disable.
  $contextual_module_enabled = module_exists('contextual_range_filter');
  if(!$contextual_module_enabled) {
    $form['google_store_locator']['advanced']['gsl_viewport']['#value'] = FALSE;
    $form['google_store_locator']['advanced']['gsl_viewport']['#disabled'] = TRUE;
    $form['google_store_locator']['advanced']['gsl_viewport']['#description'] = t('Must download and enable Views Contextual Range Filter module. see !reports', array('!reports' => l(t('reports'), 'admin/reports/status')));
  }

  // If marker management is enabled then we need to capture zoom limit.
  $form['google_store_locator']['advanced']['gsl_marker_zoom_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Marker Zoom limit'),
    '#description' => t('The zoom level at which to start displaying markers. For example, if set to 5, the map must be zoomed to greater than 5 for stores to be loaded. Set to 0 to always load stores.') . '<br />' .
    t('Enter a value from 0-21 with 0 being the farthest distance from the earth'),
    '#element_validate' => array('element_validate_integer'),
    '#size' => 5,
    '#default_value' => variable_get('gsl_marker_zoom_limit', 10),
    '#states' => array(
      'visible' => array(
        ':input[name="gsl_viewport"]' => array('checked' => TRUE)),
      'required' => array(
        ':input[name="gsl_viewport"]' => array('checked' => TRUE)),
    ),
  );

  // Google Map styles.
  $form['google_store_locator']['advanced']['gsl_map_style'] = array(
    '#type' => 'textarea',
    '#title' => t('Google map style'),
    '#description' => t('Tip: Try <a href="!url">Snazzy Maps</a> for ready to use map styles.', array('!url' => 'https://snazzymaps.com/')),
    '#default_value' => variable_get('gsl_map_style', ''),
    '#rows' => 5,
  );

  $form = system_settings_form($form);
  $form['#submit'][] = 'google_store_locator_admin_form_submit';

  return $form;
}


/**
 * Callback function for /store_locator in hook_menu().
 */
function google_store_locator_default_page() {
  $variables = array(
    'data_path' => variable_get('gsl_json_path', 'store-locator/json'),
    'data_cache_enabled' => variable_get('gsl_data_cache_enabled', TRUE),
    'map_zoom' => variable_get('gsl_map_zoom', '4'),
    'map_cluster' => variable_get('gsl_map_cluster', FALSE),
    'map_cluster_grid' => variable_get('gsl_map_cluster_grid', 50),
    'map_cluster_zoom' => variable_get('gsl_cluster_zoom_limit', 10),
    'map_style' => variable_get('gsl_map_style', ''),
    'viewport_manage' => variable_get('gsl_viewport', FALSE),
    'viewport_marker_limit' => variable_get('gsl_marker_zoom_limit', 10),
    'map_long' => variable_get('gsl_map_long', '-100'),
    'map_lat' => variable_get('gsl_map_lat', '40'),
    'items_per_panel' => variable_get('gsl_items_per_panel', 10),
    'loc_search_zoom' => variable_get('gsl_loc_search_zoom', NULL),
    'loc_aware' => variable_get('gsl_loc_aware', '0'),
    'search_label' => variable_get('gsl_search_label', "Where are you?"),
    'no_results' => variable_get('gsl_noresults', 'There are no stores in this area. However, stores closest to you are listed below.'),
  );

  $marker_icon_fid = variable_get('gsl_marker_icon', '');

  // Add the zoom setting if location awareness is enabled.
  if ($variables['loc_aware'] == '1') {
    $variables['loc_aware_zoom'] = variable_get('gsl_loc_aware_zoom');
  }

  if (!empty($marker_icon_fid)) {
    $marker_file = file_load($marker_icon_fid);
    $variables['marker_path'] = $marker_file->uri;
  }

  // Add the feature list if some exist.
  $feature_field = field_info_field('gsl_feature_filter_list');
  if (isset($feature_field)) {
    $feature_list = list_allowed_values($feature_field);
    if (!empty($feature_list)) {
      // Need to sanitize the keys and labels returned from
      // list_allowed_values().
      foreach ($feature_list as $key => $label) {
        $skey = field_filter_xss($key);
        $variables['feature_list'][$skey] = field_filter_xss($label);
      }
    }
  }

  return theme('google_store_locator_contents', $variables);
}

/**
 * Default implementation of the google_store_locator_contents theme hook.
 *
 * Builds the renderable array that attaches all necessary js files to the head
 * section of the page and generates the map and panel elements.
 */
function theme_google_store_locator_contents($variables) {
  $gsl_map_id = drupal_html_id('google-store-locator-map-container');

  $settings = array(
    'datapath' => $variables['data_path'],
    'dataCacheEnabled' => $variables['data_cache_enabled'],
    'mapzoom' => intval($variables['map_zoom']),
    'mapcluster' => intval($variables['map_cluster']),
    'mapclusterzoom' => intval($variables['map_cluster_zoom']),
    'mapclustergrid' => intval($variables['map_cluster_grid']),
    'map_style' => json_decode($variables['map_style']),
    'viewportManage' => $variables['viewport_manage'],
    'viewportMarkerLimit' => intval($variables['viewport_marker_limit']),
    'maplong' => $variables['map_long'],
    'maplat' => $variables['map_lat'],
    'search_label' => $variables['search_label'],
    'no_results' => $variables['no_results'],
    'loc_search_zoom' => isset($variables['loc_search_zoom']) && $variables['loc_search_zoom'] !== '' ? intval($variables['loc_search_zoom']) : NULL,
    'empty_stores_msg' => isset($variables['empty_stores_msg']) ? $variables['empty_stores_msg'] : t('There are no stores available.'),
  );

  if (!empty($variables['items_per_panel'])) {
    $settings['items_per_panel'] = $variables['items_per_panel'];
  }

  if (!empty($variables['marker_path'])) {
    $settings['marker_url'] = file_create_url($variables['marker_path']);
  }

  if (!empty($variables['feature_list'])) {
    $settings['feature_list'] = $variables['feature_list'];
  }

  $storelocator_path = libraries_get_path('storelocator');

  $output = array(
    'google_maps_api' => array(
      '#attached' => array(
        'js' => array('//maps.googleapis.com/maps/api/js?sensor=false&libraries=places' => array('type' => 'external')),
      ),
    ),
    // Module is backward compatible with path js/store-locator.compiled.js.
    'compiled_js' => array(
      '#attached' => array(
        'js' => (file_exists($storelocator_path . '/dist/store-locator.min.js')) ?
            array($storelocator_path . '/dist/store-locator.min.js') :
            array($storelocator_path . '/js/store-locator.compiled.js'),
      ),
    ),
    'build_js' => array(
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'google_store_locator') . '/js/google_store_locator.js'),
      ),
    ),
    'store_locator_sheet' => array(
      '#attached' => array(
        'css' => array(libraries_get_path('storelocator') . '/css/storelocator.css'),
      ),
    ),

    'elements_sheet' => array(
      '#attached' => array(
        'css' => array(drupal_get_path('module', 'google_store_locator') . '/theme/google_store_locator.css'),
      ),
    ),

    'gsl_map_container' => array(
      '#type' => 'markup',
      '#prefix' => '<div id="' . $gsl_map_id . '" class="google-store-locator-map-container">',
      'gsl_panel' => array(
        '#markup' => '<div class="google-store-locator-panel"></div>',
      ),
      'gsl_map' => array(
        '#markup' => '<div class="google-store-locator-map"></div>',
      ),
      '#suffix' => '</div>',
    ),
  );

  if ($markerclusterer_js = google_store_locator_get_markerclusterer_js()) {
    $output['compiled_js']['#attached']['js'][] = $markerclusterer_js;
  }

  // Add the location awareness js if it's enabled.
  if (!empty($variables['loc_aware'])) {
    $output['loc_aware_js'] = array(
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'google_store_locator') . '/js/google_store_locator_loc_aware.js'),
      ),
    );
    $settings['loc_aware_zoom'] = (int) $variables['loc_aware_zoom'];
  }

  drupal_add_js(array(
    'gsl' => array(
      $gsl_map_id => $settings,
      'proximity' => variable_get('proximity_enabled', 0),
      'metric' => variable_get('proximity_metric', 'mi'),
      'display_search_marker' => variable_get('gsl_display_search_marker', 0),
      'max_zoom' => variable_get('gsl_max_zoom', 16)
    ),
  ), 'setting');

  return $output;
}

/**
 * Implements hook_theme().
 */
function google_store_locator_theme() {
  // Returns an associative array of theme hook information.
  return array(
  // The outer array keys are the names of the theme functions, and the values
  // are arrays containing information about the hook.
    'google_store_locator_contents' => array(
     // Keys=names of the variables passed to the themable function,
     // value=default value of the variable if none is provided.
      'variables' => array(
        'data_path' => NULL,
        'map_zoom' => NULL,
        'map_cluster' => NULL,
        'map_cluster_grid' => NULL,
        'map_cluster_zoom' => NULL,
        'map_style' => NULL,
        'viewport_manage' => NULL,
        'viewport_marker_limit' => NULL,
        'map_long' => NULL,
        'map_lat' => NULL,
        'items_per_panel' => NULL,
        'loc_search_zoom' => NULL,
        'loc_aware' => NULL,
        'loc_aware_zoom' => NULL,
        'search_label' => NULL,
        'no_results' => NULL,
        'marker_path' => NULL,
        'feature_list' => NULL,
      ),
    ),
  );
}

/**
 * Submit callback for google_store_locator_admin_form.
 */
function google_store_locator_admin_form_submit($form, &$form_state) {
  if ($form['google_store_locator']['gsl_marker_icon']['#default_value'] != 0) {
    if ($form['google_store_locator']['gsl_marker_icon']['#default_value'] != $form_state['values']['gsl_marker_icon']) {
      $old_file = file_load($form['google_store_locator']['gsl_marker_icon']['#default_value']);
      file_delete($old_file);
    }
  }
  if ($form_state['values']['gsl_marker_icon'] != 0) {
    // Load the file via file.fid.
    $file = file_load($form_state['values']['gsl_marker_icon']);
    // Change status to permanent.
    $file->status = FILE_STATUS_PERMANENT;
    // Save.
    file_save($file);
    file_usage_add($file, 'google_store_locator', 'google_store_locator', $file->fid);
  }
  menu_rebuild();
}

/**
 * Form validator for google_store_locator_admin_form.
 */
function google_store_locator_admin_form_validate($form, &$form_state) {

  // Force 'gsl_loc_aware_zoom' to pass #element_validate if gsl_loc_aware
  // isn't enabled.
  if (!empty($form_state['values']['gsl_loc_aware'])) {
    if (empty($form_state['values']['gsl_loc_aware_zoom'])) {
      form_set_error('gsl_loc_aware_zoom', t('With Location Awareness enabled you must enter a zoom level!'));
    }
  }

  // Check that map zoom is between 0 and 21.
  if ($form_state['values']['gsl_map_zoom'] > 21 ||
      $form_state['values']['gsl_map_zoom'] < 0) {
    form_set_error('gsl_map_zoom',
    t('Please enter a zoom level between 0 and 21.'));
  }

  // Check that max zoom is between 0 and 21.
  if ($form_state['values']['gsl_max_zoom'] > 21 ||
    $form_state['values']['gsl_max_zoom'] < 0) {
    form_set_error('gsl_max_zoom',
      t('Please enter a zoom level between 0 and 21.'));
  }

  // Check that location search zoom is between 0 and 21.
  if ($form_state['values']['gsl_loc_search_zoom'] > 21 ||
    $form_state['values']['gsl_loc_search_zoom'] < 0) {
    form_set_error('gsl_loc_search_zoom',
      t('Please enter a zoom level between 0 and 21.'));
  }

  // Restrict latitude to 180 degrees and longitude to 360 degrees.
  if ($form_state['values']['gsl_map_long'] > 180 ||
      $form_state['values']['gsl_map_long'] < -180) {
    form_set_error('gsl_map_long',
    t('Please enter a longitude between -180 and 180'));
  }
  if ($form_state['values']['gsl_map_lat'] > 90 ||
      $form_state['values']['gsl_map_lat'] < -90) {
    form_set_error('gsl_map_lat',
    t('Please enter a latitude between -90 and 90'));
  }
}

/**
 * Checks if the markerclusterer library is available.
 *
 * Checks if the JS library markerclusterer is available in the libraries path
 * and returns the path to the file if found.
 * Checks for the new and the old naming of the library.
 *
 * @retrun string|FALSE
 *   Returns the path to the JS library or FALSE if the library isn't available.
 */
function google_store_locator_get_markerclusterer_js() {
  if ($markerclusterer_path = libraries_get_path('markerclusterer')) {
    if (file_exists($markerclusterer_path . '/src/markerclusterer.js')) {
      return $markerclusterer_path . '/src/markerclusterer.js';
    }
    elseif (file_exists($markerclusterer_path . '/src/markerclusterer_compiled.js')) {
      return $markerclusterer_path . '/src/markerclusterer_compiled.js';
    }
  }

  return FALSE;
}
